#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import sys
import time
import threading
from urllib import request
from typing import Dict, Any, List

API_URL = "https://api.openai.com/v1/responses"

# ----------------------------------------------------------
# –ú–û–î–ï–õ–ò
# ----------------------------------------------------------
WEAK_MODEL = os.getenv("WEAK_MODEL", "gpt-4o")  # —Å–ª–∞–±–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ê–≥–µ–Ω—Ç–∞ 1
STRONG_MODEL = os.getenv("STRONG_MODEL", "gpt-4o")              # —Å–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ê–≥–µ–Ω—Ç–∞ 2

# ----------------------------------------------------------
# –°–ü–ò–ù–ù–ï–†
# ----------------------------------------------------------
class Spinner:
    def __init__(self, message="–ú–∏–Ω—É—Ç–∫—É, –¥—É–º–∞—é‚Ä¶"):
        self.message = message
        self.running = False
        self.thread = None

    def _animate(self):
        frames = ["‚†ã","‚†ô","‚†π","‚†∏","‚†º","‚†¥","‚†¶","‚†ß","‚†á","‚†è"]
        i = 0
        while self.running:
            sys.stdout.write(f"\r{frames[i % len(frames)]} {self.message}")
            sys.stdout.flush()
            i += 1
            time.sleep(0.08)
        # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
        sys.stdout.write("\r" + " " * (len(self.message) + 4) + "\r")
        sys.stdout.flush()

    def __enter__(self):
        self.running = True
        self.thread = threading.Thread(target=self._animate, daemon=True)
        self.thread.start()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.running = False
        if self.thread:
            self.thread.join(timeout=1)

# ----------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø API
# ----------------------------------------------------------
def _post(payload: Dict[str, Any], timeout: int = 90) -> Dict[str, Any]:
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    body = json.dumps(payload, ensure_ascii=False).encode("utf-8")
    req = request.Request(API_URL, data=body, method="POST")
    req.add_header("Content-Type", "application/json; charset=utf-8")
    req.add_header("Authorization", f"Bearer {api_key}")
    with request.urlopen(req, timeout=timeout) as resp:
        return json.loads(resp.read().decode("utf-8"))

def _extract_text(resp_obj: Dict[str, Any]) -> str:
    text = resp_obj.get("output_text")
    if isinstance(text, str) and text.strip():
        return text.strip()
    chunks: List[str] = []
    for item in resp_obj.get("output", []) or []:
        for c in item.get("content", []) or []:
            if isinstance(c, dict) and c.get("type") in ("output_text", "text"):
                t = c.get("text")
                if isinstance(t, str):
                    chunks.append(t)
    return "".join(chunks).strip()

# ----------------------------------------------------------
# –ê–ì–ï–ù–¢ 1 ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ—Ç 3 –∫–Ω–∏–≥–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º/–æ–ø–∏—Å–∞–Ω–∏—é (Structured Outputs)
# ----------------------------------------------------------
AGENT1_SCHEMA = {
    "type": "json_schema",
    "name": "BookFinderTurn",
    "schema": {
        "type": "object",
        "additionalProperties": False,
        "properties": {
            "message": {
                "type": "string",
                "description": "–ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–ø–ª–∏–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            },
            "keywords": {
                "type": "string",
                "description": "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            },
            "books": {
                "type": "array",
                "items": {
                    "type": "object",
                    "additionalProperties": False,
                    "properties": {
                        "title": {"type": "string"},
                        "author": {"type": "string"},
                        "reason": {"type": "string", "description": "–ø–æ—á–µ–º—É —ç—Ç–∞ –∫–Ω–∏–≥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"}
                    },
                    "required": ["title", "author", "reason"]
                },
                "description": "–†–æ–≤–Ω–æ —Ç—Ä–∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å."
            }
        },
        "required": ["message", "keywords", "books"]
    },
    "strict": True
}

AGENT1_SYSTEM = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/–æ–ø–∏—Å–∞–Ω–∏–µ (–∂–∞–Ω—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–µ–º–∞—Ç–∏–∫–∞) "
    "–∏ –≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Ä–æ–≤–Ω–æ —Ç—Ä—ë—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (—Ä–æ–º–∞–Ω—ã, —Ä–∞—Å—Å–∫–∞–∑—ã –∏ —Ç.–ø.). "
    "–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–∏–π JSON –ø–æ —Å—Ö–µ–º–µ BookFinderTurn. "
    "–í–µ—Ä–Ω–∏ message='–∫—Ä–∞—Ç–∫–∞—è –≤–≤–æ–¥–Ω–∞—è', keywords='–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', "
    "–∏ books: —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –∫–Ω–∏–≥–∏, –∫–∞–∂–¥–∞—è —Å title, author, reason. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –≤–Ω–µ JSON.–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–π –∫–∞–∫–∏–µ-—Ç–æ 3 –∫–Ω–∏–≥–∏."
)

class Agent1BookFinder:
    def __init__(self, model: str = WEAK_MODEL):
        self.model = model

    def run(self, user_text: str) -> Dict[str, Any]:
        payload = {
            "model": self.model,
            "input": [
                {"role": "system", "content": AGENT1_SYSTEM},
                {"role": "user", "content": user_text}
            ],
            "text": {"format": AGENT1_SCHEMA, "verbosity": "medium"},
            "temperature": 0.5
        }
        with Spinner("Agent1 –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∫–Ω–∏–≥–∏‚Ä¶"):
            try:
                resp = _post(payload)
            except Exception:
                raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! (Agent1)")
        txt = _extract_text(resp)
        if not txt:
            raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç Agent1)")
        try:
            data = json.loads(txt)
        except json.JSONDecodeError:
            raise RuntimeError("Agent1 –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—ã—Ö–æ–¥
        return {
            "mode": data.get("mode", ""),
            "message": data.get("message", ""),
            "keywords": data.get("keywords", ""),
            "books": data.get("books", []) or []
        }

# ----------------------------------------------------------
# –ê–ì–ï–ù–¢ 2 ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏ –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è/–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
# ----------------------------------------------------------
AGENT2_SYSTEM = (
    "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –∫–Ω–∏–∂–Ω—ã–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å. "
    "–ü–æ —Å–ø–∏—Å–∫—É —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞) "
    "—Å–¥–µ–ª–∞–π –ø–æ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ –≤–Ω—è—Ç–Ω—É—é, –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): "
    "–æ —á—ë–º –∫–Ω–∏–≥–∞, –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–æ–º—É –∑–∞–π–¥—ë—Ç. –ü–∏—à–∏ –Ω–∞ —è–∑—ã–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
)

class Agent2BookSummarizer:
    def __init__(self, model: str = STRONG_MODEL):
        self.model = model

    def improve_list(self, keywords: str, books: List[Dict[str, str]]) -> str:
        lines = []
        lines.append("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        lines.append(keywords.strip() or "(–Ω–µ —É–∫–∞–∑–∞–Ω—ã)")
        lines.append("\n–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:")
        for i, b in enumerate(books, 1):
            title = b.get("title", "").strip()
            author = b.get("author", "").strip()
            reason = b.get("reason", "").strip()
            lines.append(f"{i}. {title} ‚Äî {author}. –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞: {reason}")
        user_content = "\n".join(lines)

        payload = {
            "model": self.model,
            "input": [
                {"role": "system", "content": AGENT2_SYSTEM},
                {"role": "user", "content": user_content}
            ],
            "temperature": 0.6
        }
        with Spinner("Agent2 –ø–∏—à–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏‚Ä¶"):
            try:
                resp = _post(payload)
            except Exception:
                raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! (Agent2)")
        txt = _extract_text(resp)
        return txt or "Agent2 –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π."

# ----------------------------------------------------------
# MAIN
# ----------------------------------------------------------
def main():
    print("üìö –î–≤–∞ –∞–≥–µ–Ω—Ç–∞: –ø–æ–¥–±–æ—Ä –∫–Ω–∏–≥ (Agent1) ‚Üí –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (Agent2)\n")
    print("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å (–∂–∞–Ω—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–µ–º–∞—Ç–∏–∫–∞) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n")

    agent1 = Agent1BookFinder()
    agent2 = Agent2BookSummarizer()

    while True:
        try:
            user_input = input("> ").strip()
        except EOFError:
            break
        if not user_input:
            continue
        if user_input.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            print("üëã –ü–æ–∫–∞!")
            break

        # –¶–∏–∫–ª: –ø–æ–∫–∞ Agent1 –Ω–µ –æ—Ç–¥–∞—Å—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        while True:
            result = agent1.run(user_input)
            message = result["message"]
            keywords = result["keywords"]
            books = result["books"]
            print(f"\n[Agent1 ‚Ä¢ –ø–æ–¥–±–æ—Ä] {message}")
            if keywords:
                print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
            print("\n–¢—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏:")
            for i, b in enumerate(books, 1):
                print(f"{i}. {b.get('title','')} ‚Äî {b.get('author','')}")
            # Agent2 —Å–æ–∑–¥–∞—ë—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            try:
                annotations = agent2.improve_list(keywords, books)
            except RuntimeError as e:
                print(str(e))
                break
            print("\n[Agent2 ‚Ä¢ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏]\n")
            print(annotations.strip())
            print("\n‚Äî ‚Äî ‚Äî\n")
            print("–•–æ—Ç–∏—Ç–µ –µ—â–µ –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º?")
            break
            # –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            print("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
            break

if __name__ == "__main__":
    main()

