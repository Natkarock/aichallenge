#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
import sys
import time
import threading
from urllib import request
from typing import Dict, Any, List

API_URL = "https://api.openai.com/v1/responses"

# ----------------------------------------------------------
# –ú–û–î–ï–õ–ò
# ----------------------------------------------------------
WEAK_MODEL = os.getenv("WEAK_MODEL", "gpt-4o-mini-2024-07-18")  # —Å–ª–∞–±–∞—è
STRONG_MODEL = os.getenv("STRONG_MODEL", "gpt-4o")              # —Å–∏–ª—å–Ω–∞—è

# ----------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ----------------------------------------------------------
def _post(payload: Dict[str, Any], timeout: int = 90) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI Responses API."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    body = json.dumps(payload, ensure_ascii=False).encode("utf-8")
    req = request.Request(API_URL, data=body, method="POST")
    req.add_header("Content-Type", "application/json; charset=utf-8")
    req.add_header("Authorization", f"Bearer {api_key}")
    with request.urlopen(req, timeout=timeout) as resp:
        return json.loads(resp.read().decode("utf-8"))

def _extract_text(resp_obj: Dict[str, Any]) -> str:
    """–î–æ—Å—Ç–∞—ë—Ç —Ç–µ–∫—Å—Ç –∏–∑ Responses API."""
    if resp_obj.get("output_text"):
        return resp_obj["output_text"].strip()
    chunks: List[str] = []
    for item in resp_obj.get("output", []) or []:
        for c in item.get("content", []) or []:
            if isinstance(c, dict) and c.get("type") in ("output_text", "text"):
                t = c.get("text")
                if isinstance(t, str):
                    chunks.append(t)
    return "".join(chunks).strip()

# ----------------------------------------------------------
# –°–ü–ò–ù–ù–ï–† –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
# ----------------------------------------------------------
class Spinner:
    def __init__(self, message="–ú–∏–Ω—É—Ç–∫—É, –¥—É–º–∞—é‚Ä¶"):
        self.message = message
        self.running = False
        self.thread = None

    def _animate(self):
        chars = "|/-\\"
        i = 0
        while self.running:
            sys.stdout.write(f"\r{self.message} {chars[i % len(chars)]}")
            sys.stdout.flush()
            i += 1
            time.sleep(0.1)
        sys.stdout.write("\r" + " " * (len(self.message) + 4) + "\r")

    def __enter__(self):
        self.running = True
        self.thread = threading.Thread(target=self._animate)
        self.thread.start()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.running = False
        self.thread.join()

# ----------------------------------------------------------
# AGENT 1 ‚Äî —Å–ª–∞–±–∞—è –º–æ–¥–µ–ª—å —Å structured outputs
# ----------------------------------------------------------
AGENT1_SCHEMA = {
    "type": "json_schema",
    "name": "QAOrAsk",
    "schema": {
        "type": "object",
        "additionalProperties": False,
        "properties": {
            "mode": {"type": "string", "enum": ["ask", "answer"]},
            "message": {"type": "string"},
            "normalized_question": {"type": "string"},
            "answer": {"type": "string"}
        },
        "required": ["mode", "message", "normalized_question", "answer"]
    },
    "strict": True
}

AGENT1_SYSTEM = (
    "–¢—ã ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û–ø—Ä–µ–¥–µ–ª–∏, –∑–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç ‚Äî mode='ask', message='–≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å', –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø—É—Å—Ç–æ. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å ‚Äî mode='answer', message='–∫—Ä–∞—Ç–∫–∞—è –≤–≤–æ–¥–Ω–∞—è', normalized_question='–≤–æ–ø—Ä–æ—Å', answer='–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç'. "
    "–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ –≤ JSON –ø–æ —Å—Ö–µ–º–µ QAOrAsk."
)

class Agent1Weak:
    def __init__(self, model=WEAK_MODEL):
        self.model = model

    def run(self, user_text: str) -> Dict[str, Any]:
        payload = {
            "model": self.model,
            "input": [
                {"role": "system", "content": AGENT1_SYSTEM},
                {"role": "user", "content": user_text}
            ],
            "text": {"format": AGENT1_SCHEMA},
            "temperature": 0.3
        }
        with Spinner("Agent1 –¥—É–º–∞–µ—Ç‚Ä¶"):
            try:
                resp = _post(payload)
            except Exception:
                raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Agent1.")
        txt = _extract_text(resp)
        try:
            data = json.loads(txt)
        except json.JSONDecodeError:
            raise RuntimeError("Agent1 –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
        return {
            "mode": data.get("mode", ""),
            "message": data.get("message", ""),
            "question": data.get("normalized_question", ""),
            "answer": data.get("answer", "")
        }

# ----------------------------------------------------------
# AGENT 2 ‚Äî —Å–∏–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
# ----------------------------------------------------------
AGENT2_SYSTEM = (
    "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å. "
    "–í–æ–∑—å–º–∏ –æ—Ç–≤–µ—Ç –º–ª–∞–¥—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–ø–∏—à–∏ –µ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º, "
    "–ª–æ–≥–∏—á–Ω–æ–º –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–º –≤–∏–¥–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª. –î–æ–±–∞–≤—å —è—Å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –ø—É–Ω–∫—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã."
)

class Agent2StrongEditor:
    def __init__(self, model=STRONG_MODEL):
        self.model = model

    def improve(self, question: str, base_answer: str) -> str:
        user_content = (
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{question}\n\n"
            f"–û—Ç–≤–µ—Ç –º–ª–∞–¥—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{base_answer}"
        )
        payload = {
            "model": self.model,
            "input": [
                {"role": "system", "content": AGENT2_SYSTEM},
                {"role": "user", "content": user_content}
            ],
            "temperature": 0.5
        }
        with Spinner("Agent2 —É–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç‚Ä¶"):
            try:
                resp = _post(payload)
            except Exception:
                raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Agent2.")
        txt = _extract_text(resp)
        return txt or "Agent2 –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç."

# ----------------------------------------------------------
# MAIN LOOP
# ----------------------------------------------------------
def main():
    print("ü§ù –î–≤—É—Ö–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (Agent1 ‚Üí Agent2)\n")
    print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, Agent1 –ø–æ–ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å. –î–ª—è –≤—ã—Ö–æ–¥–∞: '–≤—ã—Ö–æ–¥'.\n")

    agent1 = Agent1Weak()
    agent2 = Agent2StrongEditor()

    while True:
        user_input = input("> ").strip()
        if not user_input:
            continue
        if user_input.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            print("üëã –ü–æ–∫–∞!")
            break

        # Agent1
        while True:
            try:
                result = agent1.run(user_input)
            except RuntimeError as e:
                print(e)
                break

            if result["mode"] == "ask":
                print(f"\n[Agent1 ‚Ä¢ —É—Ç–æ—á–Ω–µ–Ω–∏–µ] {result['message']}")
                user_input = input("> ").strip()
                if user_input.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
                    print("üëã –ü–æ–∫–∞!")
                    return
                continue

            if result["mode"] == "answer":
                print(f"\n[Agent1 ‚Ä¢ –æ—Ç–≤–µ—Ç]\n–í–æ–ø—Ä–æ—Å: {result['question']}\n–û—Ç–≤–µ—Ç: {result['answer']}\n")
                try:
                    improved = agent2.improve(result['question'], result['answer'])
                    print("\n[Agent2 ‚Ä¢ —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç]\n")
                    print(improved.strip())
                    print("\n‚Äî ‚Äî ‚Äî\n")
                except RuntimeError as e:
                    print(e)
                break

if __name__ == "__main__":
    main()
