#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import dataclasses, json, os, sys, threading, time
from typing import Optional
from urllib import request, error

API_URL = "https://api.openai.com/v1/responses"
MODEL = "gpt-4o-2024-08-06"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ JSON Schema –¥–ª—è Structured Outputs ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
JSON_SCHEMA = {
    "type": "json_schema",
    "name": "MadHatterReply",
    "schema": {
        "type": "object",
        "additionalProperties": False,
        "properties": {
            "persona": {
                "type": "string",
                "description": "–ü–µ—Ä—Å–æ–Ω–∞, –≤—Å–µ–≥–¥–∞ '–ë–µ–∑—É–º–Ω—ã–π –®–ª—è–ø–Ω–∏–∫'."
            },
            "joke": {
                "type": "string",
                "description": "–ö–æ—Ä–æ—Ç–∫–∞—è, –∏–≥—Ä–∏–≤–∞—è —à—É—Ç–∫–∞ –≤ —Å—Ç–∏–ª–µ –ë–µ–∑—É–º–Ω–æ–≥–æ –®–ª—è–ø–Ω–∏–∫–∞ (–ø–æ-—Ä—É—Å—Å–∫–∏)."
            },
            "riddle": {
                "type": "string",
                "description": "–û–¥–Ω–∞-–¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–∞–¥–∫–∏ –≤ —Å—Ç–∏–ª–µ –ë–µ–∑—É–º–Ω–æ–≥–æ –®–ª—è–ø–Ω–∏–∫–∞ (–ø–æ-—Ä—É—Å—Å–∫–∏)."
            },
            "answer": {
                "type": "string",
                "description": "–Ø—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ-—Ä—É—Å—Å–∫–∏)."
            }
        },
        "required": ["persona", "joke", "riddle", "answer"]
    },
    "strict": True
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ª–∞—Å—Å –æ—Ç–≤–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
@dataclasses.dataclass
class MadHatterReply:
    persona: Optional[str]
    joke: str
    riddle: str
    answer: str

    @staticmethod
    def from_dict(d: dict) -> "MadHatterReply":
        return MadHatterReply(
            persona=d.get("persona"),
            joke=(d.get("joke") or "").strip(),
            riddle=(d.get("riddle") or "").strip(),
            answer=(d.get("answer") or "").strip(),
        )

    def pretty_print(self) -> str:
        lines = []
        if self.persona:
            lines.append(f"({self.persona})")
        lines += [f"–®—É—Ç–∫–∞: {self.joke}", f"–ó–∞–≥–∞–¥–∫–∞: {self.riddle}", f"–û—Ç–≤–µ—Ç: {self.answer}"]
        return "\n".join(lines)

    def as_history_text(self) -> str:
        p = f"[{self.persona}] " if self.persona else ""
        return f"{p}–®—É—Ç–∫–∞: {self.joke}\n–ó–∞–≥–∞–¥–∫–∞: {self.riddle}\n–û—Ç–≤–µ—Ç: {self.answer}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
class Spinner:
    def __init__(self, text="–ú–∏–Ω—É—Ç–∫—É, —è –¥—É–º–∞—é"):
        self.text = text
        self.stop_flag = threading.Event()
        self.thread = threading.Thread(target=self._run, daemon=True)
    def _run(self):
        frames = ["‚†ã","‚†ô","‚†π","‚†∏","‚†º","‚†¥","‚†¶","‚†ß","‚†á","‚†è"]
        i = 0
        while not self.stop_flag.is_set():
            sys.stdout.write(f"\r{frames[i % len(frames)]} {self.text}‚Ä¶")
            sys.stdout.flush(); i += 1; time.sleep(0.08)
    def start(self): self.thread.start()
    def stop_and_clear(self):
        self.stop_flag.set(); self.thread.join(timeout=1)
        sys.stdout.write("\r\033[2K"); sys.stdout.flush()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–∑–æ–≤ OpenAI API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def call_openai(messages) -> MadHatterReply:
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    payload = {
        "model": MODEL,
        "input": messages,
        "text": {
            "format": JSON_SCHEMA,
            "verbosity": "medium"
        }
    }

    data = json.dumps(payload, ensure_ascii=False).encode("utf-8")
    req = request.Request(API_URL, data=data, method="POST")
    req.add_header("Content-Type", "application/json; charset=utf-8")
    req.add_header("Authorization", f"Bearer {api_key}")

    try:
        with request.urlopen(req, timeout=60) as resp:
            obj = json.loads(resp.read().decode("utf-8"))
    except Exception:
        # —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ ‚Äú–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!‚Äù
        raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏
    text = obj.get("output_text")
    if not text:
        chunks = []
        for item in obj.get("output", []) or []:
            for c in item.get("content", []) or []:
                if c.get("type") in ("output_text", "text") and isinstance(c.get("text"), str):
                    chunks.append(c["text"])
        text = "".join(chunks).strip() if chunks else ""

    if not text:
        raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    try:
        data = json.loads(text)
    except json.JSONDecodeError:
        raise RuntimeError("–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    return MadHatterReply.from_dict(data)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def main():
    # üé© –§–∞–Ω—Ç–∞–∑–∏–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –®–ª—è–ø–Ω–∏–∫–∞
    print("üé© –ë–µ–∑—É–º–Ω—ã–π –®–ª—è–ø–Ω–∏–∫ —à–µ–ø—á–µ—Ç:\n¬´–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —á–∞–µ–ø–∏—Ç–∏–µ —Ä–∞–∑—É–º–∞! –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî –Ω–æ –±–µ—Ä–µ–≥–∏—Å—å, –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥–∞–¥–∫–æ–π‚Ä¶¬ª\n")

    history = [{
        "role": "system",
        "content": (
            "–¢—ã –±–µ–∑—É–º–Ω—ã–π —à–ª—è–ø–Ω–∏–∫ –∏–∑ –ê–ª–∏—Å—ã –∏ –≥–æ–≤–æ—Ä–∏—à—å –∑–∞–≥–∞–¥–∫–∞–º–∏. "
            "–í –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —Å–ø–µ—Ä–≤–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —à—É—Ç–∫–∞, "
            "–∑–∞—Ç–µ–º –∑–∞–≥–∞–¥–∫–∞ (1‚Äì2 —Å—Ç—Ä–æ–∫–∏), –∑–∞—Ç–µ–º —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
    }]

    try:
        while True:
            try:
                user = input("> ").strip()
            except EOFError:
                break

            if not user:
                continue
            if user.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
                print("üé© –ë–µ–∑—É–º–Ω—ã–π –®–ª—è–ø–Ω–∏–∫ –º–∞—à–µ—Ç —à–ª—è–ø–æ–π: –¥–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!")
                break

            history.append({"role": "user", "content": user})
            spin = Spinner("–ú–∏–Ω—É—Ç–∫—É, —è –¥—É–º–∞—é")
            spin.start()

            try:
                reply = call_openai(history)
            except Exception as e:
                spin.stop_and_clear()
                print(str(e))  # –ø—Ä–æ—Å—Ç–æ ‚Äú–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!‚Äù
                continue

            spin.stop_and_clear()
            print(reply.pretty_print())
            history.append({"role": "assistant", "content": reply.as_history_text()})

    except KeyboardInterrupt:
        print("\nüé© –ë–µ–∑—É–º–Ω—ã–π –®–ª—è–ø–Ω–∏–∫ –∏—Å—á–µ–∑–∞–µ—Ç –≤ –æ–±–ª–∞–∫–µ —á–∞—è! –ü–æ–∫–∞!")

if __name__ == "__main__":
    main()
