# -*- coding: utf-8 -*-
import streamlit as st

from book_agents.const import WEAK_MODEL, STRONG_MODEL, SUMMARIZER_MODEL
from book_agents.api_functions import rough_token_estimate
from book_agents.agent_gui import (
    Agent1BookFinderGUI, Agent2BookSummarizerGUI, Agent3SummarizerGUI, hard_truncate
)

st.set_page_config(page_title="–ö–Ω–∏–∂–Ω—ã–π –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç (GUI)", page_icon="üìö", layout="centered")

# ---------------- Session state ----------------
if "messages" not in st.session_state:
    st.session_state.messages = []  # [{'role': 'user'|'assistant', 'content': str}]
if "target_budget" not in st.session_state:
    st.session_state.target_budget = 4000
if "allow_summary" not in st.session_state:
    st.session_state.allow_summary = True
if "hard_truncate" not in st.session_state:
    st.session_state.hard_truncate = False

# ---------------- Sidebar ----------------
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
st.sidebar.write(f"–ú–æ–¥–µ–ª–∏:\n\n- Agent1: `{WEAK_MODEL}`\n- Agent2: `{STRONG_MODEL}`\n- Summarizer: `{SUMMARIZER_MODEL}`")
st.session_state.target_budget = st.sidebar.number_input("–¶–µ–ª–µ–≤–æ–π –±—é–¥–∂–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤–≤–æ–¥", 512, 32000, st.session_state.target_budget, step=256)
st.session_state.allow_summary = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª–∏–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞", True)
st.session_state.hard_truncate = st.sidebar.checkbox("–ñ—ë—Å—Ç–∫–∞—è –æ–±—Ä–µ–∑–∫–∞ –≤–º–µ—Å—Ç–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", False, help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω.")

demo = st.sidebar.button("‚ñ∂ –î–µ–º–æ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã") 
oversize_demo = st.sidebar.button("‚ñ∂ –î–µ–º–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—Ä—Ö–ª–∏–º–∏—Ç–∞") 
clear = st.sidebar.button("üóë –û—á–∏—Å—Ç–∏—Ç—å")

if clear:
    st.session_state.messages = []

st.title("üìö –ö–Ω–∏–∂–Ω—ã–π –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç")
st.caption("Agent1 (–ø–æ–¥–±–æ—Ä) ‚Üí Agent2 (–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏) + Agent3 (—Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è). –ë–∞–±–ª—ã, –ª–æ–∞–¥–µ—Ä –∏ usage.")

# --------------- Helpers ---------------
def add_bubble(role: str, text: str):
    """Persist + render a bubble."""
    st.session_state.messages.append({"role": role, "content": text})
    with st.chat_message(role):
        st.markdown(text)

def add_user_bubble(text: str): add_bubble("user", text)
def add_assistant_bubble(text: str): add_bubble("assistant", text)

def show_history():
    for m in st.session_state.messages:
        with st.chat_message(m["role"]):
            st.markdown(m["content"])

# Render existing history first
show_history()

def run_once(user_text: str):
    # 1) length estimate
    est = rough_token_estimate(user_text)
    add_assistant_bubble(f"_–ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã –≤–≤–æ–¥–∞: ~{est} —Ç–æ–∫–µ–Ω–æ–≤_")

    preprocessed = user_text
    pre_usage = {"input_tokens": 0, "output_tokens": 0, "total_tokens": 0, "reasoning_tokens": 0}

    # 2) preprocess
    if est > st.session_state.target_budget and (st.session_state.allow_summary or st.session_state.hard_truncate):
        if not st.session_state.hard_truncate:
            add_assistant_bubble("‚è≥ **–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É—é –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥‚Ä¶**")
            summarizer = Agent3SummarizerGUI()
            preprocessed, pre_usage = summarizer.summarize_text(user_text, st.session_state.target_budget)
            add_assistant_bubble("‚úÖ **–ì–æ—Ç–æ–≤–æ. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.**")
            add_assistant_bubble(f"**usage (summarizer):**\n\n```json\n{pre_usage}\n```")
        else:
            preprocessed = hard_truncate(user_text)
            add_assistant_bubble("‚úÇÔ∏è **–î–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω (hard truncate).**")

    # 3) Agent1
    add_assistant_bubble("ü§ñ **Agent1 –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∫–Ω–∏–≥–∏‚Ä¶**")
    agent1 = Agent1BookFinderGUI()
    result1, usage1, _ = agent1.run(preprocessed)

    msg_lines = [
        f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {result1['keywords']}",
        "**–¢—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏:**",
        *[f"- {b.get('title','')} ‚Äî {b.get('author','')}" for b in result1['books']],
        f"\n**usage (Agent1):**\n\n```json\n{usage1}\n```"
    ]
    add_assistant_bubble("\n".join(msg_lines))

    # 4) Agent2
    add_assistant_bubble("üìù **Agent2 –ø–∏—à–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏‚Ä¶**")
    agent2 = Agent2BookSummarizerGUI()
    annotations, usage2, _ = agent2.improve_list(result1["keywords"], result1["books"])
    add_assistant_bubble("**–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏:**\n\n" + annotations)
    add_assistant_bubble(f"**usage (Agent2):**\n\n```json\n{usage2}\n```")

    # 5) totals
    total_usage = {
        "input_tokens": pre_usage["input_tokens"] + usage1["input_tokens"] + usage2["input_tokens"],
        "output_tokens": pre_usage["output_tokens"] + usage1["output_tokens"] + usage2["output_tokens"],
        "total_tokens": pre_usage["total_tokens"] + usage1["total_tokens"] + usage2["total_tokens"],
        "reasoning_tokens": pre_usage["reasoning_tokens"] + usage1["reasoning_tokens"] + usage2["reasoning_tokens"],
    }
    add_assistant_bubble(f"**–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ usage:**\n\n```json\n{total_usage}\n```")

# --------------- Input ---------------
prompt = st.chat_input("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å‚Ä¶")
if prompt:
    add_user_bubble(prompt)
    run_once(prompt)

# --------------- Demo ---------------
if demo:
    short_query = "–•–æ—á—É —Ç—ë–ø–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é –ø—Ä–æ–∑—É –ø—Ä–æ –æ—Å–µ–Ω—å, –º–µ–ª–∞–Ω—Ö–æ–ª–∏—é –∏ –º–∞–ª–µ–Ω—å–∫–∏–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –≥–æ—Ä–æ–¥."
    long_query = (
        "–ù—É–∂–Ω—ã —Ä–æ–º–∞–Ω—ã –∏ —Ä–∞—Å—Å–∫–∞–∑—ã —Å –Ω–µ—Ç–æ—Ä–æ–ø–ª–∏–≤—ã–º —Ä–∏—Ç–º–æ–º, –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π —Å—Ç–∞—Ä—ã—Ö —É–ª–æ—á–µ–∫, "
        "–∫–∞—Ñ–µ, –¥–æ–∂–¥–ª–∏–≤—ã—Ö –ø–∞—Ä–∫–æ–≤. –ü—É—Å—Ç—å –±—É–¥–µ—Ç –ª–∏—Ä–∏—á–Ω–æ—Å—Ç—å, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Å–µ–º—å–µ, "
        "–æ –ø–∞–º—è—Ç–∏ –∏ –≤–∑—Ä–æ—Å–ª–µ–Ω–∏–∏, –Ω–æ –±–µ–∑ —á–µ—Ä–Ω—É—Ö–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∞–≤—Ç–æ—Ä—ã, –≥–¥–µ –≤–∞–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ –±—ã—Ç–∞, "
        "–≤–∫—É—Å –∫ —á—Ç–µ–Ω–∏—é, —É—é—Ç –∏ –º—è–≥–∫–∞—è –∏—Ä–æ–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã –ø–µ—Ä–µ–≤–æ–¥–Ω—ã–µ –≤–µ—â–∏ (–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∏–ª–∏ —è–ø–æ–Ω—Å–∫–∏–µ), "
        "–Ω–æ —á—Ç–æ–±—ã —è–∑—ã–∫ –≤ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –±—ã–ª –∂–∏–≤–æ–π –∏ –Ω–µ ¬´—Å—É—Ö–æ–π¬ª. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞."
        "\n‚Äî –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—é –±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–Ω–µ–≤–Ω–∏–∫–æ–≤/–∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—ã—Å—è—á —Å–∏–º–≤–æ–ª–æ–≤, "
        "–∫–æ—Ç–æ—Ä—ã–π —Å–∏–ª—å–Ω–æ —Ä–∞–∑–¥—É–≤–∞–µ—Ç –≤–≤–æ–¥, –∏ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω —Ü–µ–ª–∏–∫–æ–º, –∞ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è —Ç–µ–º/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π. "
        * 20
    )
    oversized = ("–û—á–µ–Ω—å-–¥–ª–∏–Ω–Ω—ã–π-–≤–≤–æ–¥ " * 20000) +                 "\n–¢–µ–º–∞: —Ç—ë–ø–ª–∞—è –ø—Ä–æ–∑–∞ –æ –≥–æ—Ä–æ–¥–µ, –æ—Å–µ–Ω–∏, —Å–µ–º–µ–π–Ω–æ–π –ø–∞–º—è—Ç–∏, –±–µ–∑ –º—Ä–∞—á–Ω—è–∫–∞."

    cases = [
        ("–ö–û–†–û–¢–ö–ò–ô –ó–ê–ü–†–û–°", short_query),
        ("–î–õ–ò–ù–ù–´–ô –ó–ê–ü–†–û–°", long_query),
        ("–°–í–ï–†–•–õ–ò–ú–ò–¢–ù–´–ô –ó–ê–ü–†–û–°", oversized),
    ]

    for title, text in cases:
        add_user_bubble(title)
        run_once(text)
        
 # --------------- Demo Oversize---------------
if oversize_demo:
    oversized = ("–û—á–µ–Ω—å-–¥–ª–∏–Ω–Ω—ã–π-–≤–≤–æ–¥ " * 20000) +                 "\n–¢–µ–º–∞: —Ç—ë–ø–ª–∞—è –ø—Ä–æ–∑–∞ –æ –≥–æ—Ä–æ–¥–µ, –æ—Å–µ–Ω–∏, —Å–µ–º–µ–π–Ω–æ–π –ø–∞–º—è—Ç–∏, –±–µ–∑ –º—Ä–∞—á–Ω—è–∫–∞." 
    
    add_user_bubble("–°–í–ï–†–•–õ–ò–ú–ò–¢–ù–´–ô –ó–ê–ü–†–û–°")
    run_once(oversized )
