#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from urllib import request
import sys, time, threading
from typing import Dict, Any

API_URL = "https://api.openai.com/v1/responses"
MODEL = "gpt-4o-mini-2024-07-18"  # –ª—ë–≥–∫–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–º–µ—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏–Ω–Ω–µ—Ä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Spinner:
    def __init__(self, text="–ú–∏–Ω—É—Ç–∫—É, –¥—É–º–∞—é"):
        self.text = text
        self._stop = threading.Event()
        self._t = threading.Thread(target=self._run, daemon=True)

    def _run(self):
        frames = ["‚†ã","‚†ô","‚†π","‚†∏","‚†º","‚†¥","‚†¶","‚†ß","‚†á","‚†è"]
        i = 0
        while not self._stop.is_set():
            sys.stdout.write(f"\r{frames[i % len(frames)]} {self.text}‚Ä¶")
            sys.stdout.flush()
            i += 1
            time.sleep(0.08)

    def start(self): self._t.start()
    def stop_and_clear(self):
        self._stop.set(); self._t.join(timeout=1)
        sys.stdout.write("\r\033[2K"); sys.stdout.flush()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–∑–æ–≤ API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def ask_model(question: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    payload = {
        "model": MODEL,
        "input": [{"role": "user", "content": question}],
        "temperature": 0.7
    }

    body = json.dumps(payload, ensure_ascii=False).encode("utf-8")
    req = request.Request(API_URL, data=body, method="POST")
    req.add_header("Content-Type", "application/json; charset=utf-8")
    req.add_header("Authorization", f"Bearer {api_key}")

    try:
        with request.urlopen(req, timeout=90) as resp:
            obj = json.loads(resp.read().decode("utf-8"))
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API: {e}")

    # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç
    text = obj.get("output_text")
    if text:
        return text.strip()

    # fallback
    chunks = []
    for item in obj.get("output", []) or []:
        for c in item.get("content", []) or []:
            if c.get("type") in ("output_text","text") and isinstance(c.get("text"), str):
                chunks.append(c["text"])
    return "".join(chunks).strip()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    print("üß© –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ (–ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç vs ¬´—Ä–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ¬ª)")
    print("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–ª–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):\n")

    while True:
        try:
            question = input("> ").strip()
        except EOFError:
            break

        if not question:
            continue
        if question.lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"):
            print("üëã –ü–æ–∫–∞!")
            break

        # –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        spin = Spinner("–ú–∏–Ω—É—Ç–∫—É, –¥—É–º–∞—é")
        spin.start()
        try:
            answer_direct = ask_model(question)
        except Exception as e:
            spin.stop_and_clear()
            print(str(e))
            continue
        spin.stop_and_clear()

        print("\n" + "="*80)
        print("‚ñ∂ –†–µ–∂–∏–º A: –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç")
        print("="*80)
        print(answer_direct.strip() or "(–ø—É—Å—Ç–æ)")

        # –û—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π "—Ä–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ"
        spin = Spinner("–ú–∏–Ω—É—Ç–∫—É, –¥—É–º–∞—é")
        spin.start()
        try:
            answer_steps = ask_model(f"{question}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Ä–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ.")
        except Exception as e:
            spin.stop_and_clear()
            print(str(e))
            continue
        spin.stop_and_clear()

        print("\n" + "="*80)
        print("‚ñ∂ –†–µ–∂–∏–º B: —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ¬´—Ä–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ¬ª")
        print("="*80)
        print(answer_steps.strip() or "(–ø—É—Å—Ç–æ)")
        print("\n")

if __name__ == "__main__":
    main()
